* rsa 登入申辦方式
** 在local執行 ssh-keygen -t rsa -f ~/.ssh/my-ssh-key -C [USERNAME]
 method 1.
 - USERNAME是你remote target的使用者名稱
 - public and private key 會放在本地的 ~/.ssh/內
 method 2:
 - cd  ~/.ssh
 - ssh-keygen -b 4096
** 把本機的public key 複製加入remote server的~/.ssh/authorized_keys檔案尾端
** 已經可以連線了
 - 如果你是拿別人給的private key, 可以指定private key, 可以用ssh -i {private key file}, 指定pk檔案
** public key/ private key 交換設定（快速）
1. generate key
 - ssh-keygen -t rsa
2. copy public key to server
 -  ssh-copy-id -i ~/.ssh/id_rsa.pub user1@$ip 
** alias ssh's host name
1. edit config
- vi ~/.ssh/config
2. add host alias, given port
#+BEGIN_SRC 
Host alias-name                      # 用來連線的 alias 名稱
HostName server.name                 # host domain 或 ip
Port port-number                     # host 的 SSH port
IdentitiesOnly yes                   # 使用指定的 key
IdentityFile ~/.ssh/private_ssh_file.pem  # 指定 pem 或 pub 的 key 路徑
User username-on-remote-machine      # 登入 SSH的 username
#+END_SRC
** bad own or permision on ~/.ssh/config
1. I needed to have rw for user only permissions on config. This fixed it.
#+BEGIN_SRC 
chmod 600 ~/.ssh/config
#+END_SRC
2. As others have noted below, it could be the file owner. (upvote them!)
#+BEGIN_SRC 
chown $USER ~/.ssh/config
#+END_SRC
** pass through the gateway
*** use tt
Instead of typing two ssh command, I can type the following all-in-one 
command. This is useful for connecting to FooServer via
 firewall called ‘Jumphost’ as the jump host:
#+BEGIN_SRC 
ssh -tt xxx@gateway ssh -tt xxx@targetserver
#+END_SRC
- The -t option passed to the ssh command force pseudo-tty allocation. 
This can be used to execute arbitrary screen-based programs on a remote machine.
 Multiple -tt options force tty allocation, even if ssh has no local tty.

*** update ~.ssh/config
#+BEGIN_SRC 
Host fooserver
HostName FooServer
User vivek
ProxyCommand ssh vivek@Jumphost nc %h %p
#+END_SRC
* SSH proxy command
** 重本機直接連到jump-box機器能連線到的其他機器
#+BEGIN_SRC 
Host tunnel
Hostname localhost
User fenrir
Port 12345
ProxyCommand ssh -W %h:%p myHome #連上tunnel前先proxyCommand執行

Host myHome #Jump Box
Hostname 111.252.159.219
User crimsonfantasy
#+END_SRC
執行的時候- 使用ssh tunnel 能直上
* ssh tunnel
** basic
# 首先，在客戶那理的機器下指令連回我們自己的 Server，並設定自己 Server 上的 12345 port 會對應到幾器上的 SSH port
ssh -NfR 12345:localhost:22 fred@myhost.com
# 然後在 myhost 的機器上連自己的 12345 port，就可以連回在客戶那的機器
ssh localhost -p 12345

* ssh vpn
** sshuttle
It will tunnel all your TCP traffic automatically for you. You can add the --dns argument to have it tunnel your DNS traffic as well
#+BEGIN_SRC 
./sshuttle -r username@sshserver 0.0.0.0/0 -vv
#+END_SRC

* ssh socket
This will start a "SOCKS" proxy listening on <local port>.
#+BEGIN_SRC 
ssh -fND 127.0.0.1:<local port> username@sshserver
#+END_SRC
#+BEGIN_SRC 
proxychains <program name>
#+END_SRC





