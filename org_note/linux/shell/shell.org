* awk
- awk, a Interpreted programming language tool, used for 
  - text processing
  - data extraction
  - reporting tool
- name, abbreviation  of three author's family name.
  - Alfred aho, Peter Weinberger , and Brian kernighan
Usage: awk -F 'program' file.
For example:
#+begin_src <sh>
1. awk -F: '{print $1 $6}' /etc/passwd
2. ls -l /etc | awk '{print $1 "\t" $9}'
#+end_src

* batch
batch read the commands from standard input or a specified file which are
to be executed at a later time.
- options
  - -f : read commands from file  instead of standard
  - -m : send mail to the user when the job has complete
  - -q : uses the specified queue.
#+begin_src <sh>
1. batch -f do.bat
#+end_src


* expect (remotely shell)
*** install 
sudo apt-get install tcl tk expect
*** example:
- 必須是/use/bin/expect 開頭
- 一般本機shell 和 expect 不能同在一個script
#+BEGIN_SRC 
#!/usr/bin/expect 

#+END_SRC
* Global Variables
They are visible and valid anywhere in the bash script. You can even get its value from inside the function.
If you declare a global variable within a function, you can get its value from outside the function.
Any variable you declare is a global variable by default. 
*If you define a variable outside the function, you call it inside the function without problems*
#+BEGIN_SRC 
#!/bin/bash
myfunc() {

	input=$(($input + 10))

}

read -p "Enter a number: " input
myfunc
echo "The new value is: $input"
#+END_SRC
So how to overcome something like this? Use local variables.
* Local Variables
If you will use the variable inside the function only, you can declare it as a local variable using the local keyword  like this:
local tmp=$(( $val + 10 ))
So if you have two variables, one inside the function and the other is outside the function and they have the identical name, they won’t affect each other.
#+BEGIN_SRC 
#!/bin/bash
myfunc() {

	local tmp=$(($val + 10))

	echo "The Temp from inside function is $tmp"
}
tmp=4
myfunc
echo "The temp from outside is $tmp"
#+END_SRC
